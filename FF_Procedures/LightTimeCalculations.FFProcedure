

// SCtoGSLightTime()
// Computes the light time required for a signal to travel from a spacecraft to a ground station.
// The direction in time for the propagation is specified by the 'direction' argument.  Computing
// a light time in the forward direction will produce a positive light time value, computing a
// light time in the backward direction will produce a negative light time value.
//
// 
// Inputs / Outputs (see below)
//
// Dependencies:  
//       None
//
// Assumptions:
//       None
//       
Define Procedure SCtoGSLightTime(	Spacecraft        sc,    /* Input/       - spacecraft at the 'start' node of the ray-path (spacecraft epoch is the start time)  */
									GroundStation     gs,    /* Input/       - ground station at the 'end' node of the ray-path  */
									Variable   direction,    /* Input/       - direction of propagation, a negative number for backward in time, positive for forward  */
									TimeSpan  light_time);   /*      /Output - the duration of the signal travel time for the ray-path (positive or negative, based on direction) */
	
	
	TimeSpan sc_time;	// 'start' time at SC (known)
	TimeSpan gs_time;	// 'end' time at GS (unknown) 
	Variable delta_t;
	Variable last_delta_t;
	Variable rho;

	sc.Save();

	
	sc.CentralBody = gs.CentralBody;

	direction    = sign(direction);
	sc_time      = sc.Epoch;
	gs_time      = sc.Epoch;
	last_delta_t = 1e+10;
	
	While (abs(delta_t-last_delta_t) > 1e-9);
		
		last_delta_t = delta_t;
		
		rho     = (sc.Position - gs.GetPositionAtEpoch(gs_time)).Norm();
		delta_t = rho/Constants.SpeedOfLight;
		
		gs_time = sc_time + TimeSpan.FromSeconds(delta_t*direction);
	End;
	

	light_time = gs_time - sc_time;


	sc.Restore();
	
EndProcedure;


// GStoSCLightTime()
// Computes the light time required for a signal to travel from a ground station to a spacecraft.
// The direction in time for the propagation is specified by the 'direction' argument.  Computing
// a light time in the forward direction will produce a positive light time value, computing a
// light time in the backward direction will produce a negative light time value.
//
// NOTE: the epoch of the Spacecraft will be used as the 'start' epoch for the Ground Station at
// the starting node.
//
// 
// Inputs / Outputs (see below)
//
// Dependencies:  
//       None
//
// Assumptions:
//       None
//       
Define Procedure GStoSCLightTime(	GroundStation     gs,    /* Input/       - ground station at the 'start' node of the ray-path (using the spacecraft epoch)  */
									Spacecraft        sc,    /* Input/       - spacecraft at the 'end' node of the ray-path  */
									Variable   direction,    /* Input/       - direction of propagation, a negative number for backward in time, positive for forward  */
									TimeSpan  light_time);   /*      /Output - the duration of the signal travel time for the ray-path (positive or negative, based on direction) */
	
	
	TimeSpan gs_time;	// 'start' time at GS (known) 
	TimeSpan sc_time;	// 'end' time at SC (unknown)
	Variable delta_t;
	Variable last_delta_t;
	Variable rho;
	String   sc_cb;

	direction = sign(direction);
	sc_cb     = sc.CentralBody;
	
	sc.Save();
	
	sc.CentralBody = gs.CentralBody;
	gs_time        = sc.Epoch;
	sc_time        = sc.Epoch;
	last_delta_t   = 1e+10;
	
	
	While (abs(delta_t-last_delta_t) > 1e-9);
		
		last_delta_t = delta_t;
		
		sc.CentralBody = sc_cb;
		sc.StepToEpoch(sc_time);
		sc.CentralBody = gs.CentralBody;
		
		rho     = (sc.Position - gs.GetPositionAtEpoch(gs_time)).Norm();
		delta_t = rho/Constants.SpeedOfLight;
		
		sc_time = gs_time + TimeSpan.FromSeconds(delta_t*direction);
	End;
	
	light_time = sc_time - gs_time;
	

	sc.Restore();
	
EndProcedure;
