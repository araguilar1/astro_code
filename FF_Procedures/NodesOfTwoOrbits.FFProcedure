
// TrackingScheduleGenerator()
// Generates a schedule of tracking passes for the input Spacecraft and GroundStations.  The schedule is
// determined based on geometric visibility and the inputs for nominal pass length
//
// Inputs/Outputs:
//       - see below
//
// Dependencies:
//     - None
//
// Assumptions:
//     - Assumes closed orbits for both spacecraft states
//

Define Procedure NodesOfTwoOrbits(	Spacecraft scOrbit1, 	/* Input/       - Spacecraft representing Orbit 1  */
									Spacecraft scOrbit2, 	/* Input/       - Spacecraft representing Orbit 2  */
									Array       ascNode, 	/*      /Output - Array containing the vector pointing to the ascending node crossing between the two orbits  */
									Array      descNode);	/*      /Output - Array containing the vector pointing to the descending node crossing between the two orbits  */

	//Define variables and arrays
	Array r1(3);
	Array r2(3);
	Array v1(3);
	Array v2(3);
	Array h1(3);
	Array h2(3);
	Variable error = 0;

	//Calculate nodes of intersection of the two orbits
	Try sending ErrorCount to error;

		r1 = scOrbit1.Position.Normalized();  //scOrbit1 unit position vector
		r2 = scOrbit2.Position.Normalized();  //scOrbit2 unit position vector
		v1 = scOrbit1.Velocity.Normalized();  //scOrbit1 unit velocity vector
		v2 = scOrbit2.Velocity.Normalized();  //scOrbit2 unit velocity vector

		h1 = r1.CrossProduct(v1).Normalized();  //scOrbit1 unit angular momentum vector
		h2 = r2.CrossProduct(v2).Normalized();  //scOrbit2 unit angular momentum vector
		
		ascNode  = h2.CrossProduct(h1).Normalized();
		descNode = h1.CrossProduct(h2).Normalized();
	End;

	If (error > 0);
		Diagnostics.ReportErrorMessage(0, "Calculation of Orbit Nodes Failed");
		ExitProcedure;
	End;

EndProcedure;