

// RunWithFFThreadPool()
// Runs a set of FF.exe jobs using the Run command.  The number of executing FF.exe processes
// is monitored using a command-line call to count the processes.  if the number of currently
// executing jobs falls below the number of processes, the next jobs in the queue are started
//
// Inputs/Outputs:  (See below)
//
// Dependencies:
//       - GetNumberOfProcessesRunning()
//
// Assumptions:
//       - Assumes the user has write access to the directory with the MissionPlan


Define Procedure RunWithFFThreadPool(	StringArray       runCmds, 	/* Input/       - list of ff.exe command-line calls  */
										Variable         waitTime, 	/* Input/       - the time in seconds to wait between checks of the number of running processes  */
										Variable     maxProcesses,	/* Input/       - the desired number of concurrent processes  */
										Variable   blockUntilDone);	/* Input/       - flag indicating whether to block further FF processing until all jobs are done  */
	
	
	Variable procRunning;
	Variable jobsRun;
	Variable totalJobs;

	String status1;
	String status2;
	
	TimeSpan tic;
	TimeSpan toc;
	
	DataTableWindow dtw({status1, status2});
	
	procRunning  = 0;
	jobsRun      = 0;
	totalJobs    = runCmds.Dimension;

	tic = SystemTime();
	While (jobsRun < totalJobs);
		
		If (procRunning >= maxProcesses);
			Pause waitTime;
		End;
		
		// check number off ff.exe jobs
		Call GetNumberOfProcessesRunning("ff.exe", procRunning);
		
		If (procRunning < maxProcesses);
		
			// make call to next job
			status1 = (jobsRun+1).Format("Job %d of ")+totalJobs.Format("%d") + (100*((jobsRun+1)/totalJobs)).Format("(%5.1f")+" %)";
			status2 = runCmds[jobsRun];
			
			dtw.Update();
			
			Run runCmds[jobsRun] without wait;
			// track current and total
			procRunning++;
			jobsRun++;
		End;
	End;
	
	// have kicked off execution of all jobs
	If (blockUntilDone);
		
		// wait until those jobs are done before letting FreeFlyer move on
		While (procRunning > 0);
			Call GetNumberOfProcessesRunning("ff.exe", procRunning);
			Pause waitTime;
		End;
	End;
	toc = SystemTime();
	
	status1 = "Finished!";
	status2 = "All jobs executed in " + (toc-tic).ToMinutes().Format("%7.2f minutes.");
	
	dtw.Update();
	
EndProcedure;