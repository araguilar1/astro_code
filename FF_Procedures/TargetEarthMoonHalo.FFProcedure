
// TargetEarthMoonHalo()
// Targets impulsive maneuvers for a Halo Orbit in the Earth-Moon rotating system. Maneuvers
// are targeted every 1/2 revolution for the specfied number of revolutions.  Outputs are a list 
// of impulsive maneuvers in MJ2K and a final ephemeris
// 
// Inputs / Outputs (see below)
//
// Dependencies:  
//       None
//
// Assumptions:
//        -  input state is a valid X-axis crossing state in the rotating system, with dimensionalized units
//       

Define Procedure TargetEarthMoonHalo(Spacecraft             sc,    /* Input/       - Spacecraft with the initial state and epoch for the targeting  */
									 Variable          nOrbits,    /* Input/       - number of desired Halo orbits to complete  */
									 TimeSpanArray  mnvrEpochs,    /*      /Output - Array of epochs for targeted maneuvers  */
									 List<ImpulsiveBurn>   sks,    /*      /Output - list of impulsive maneuvers in MJ2K, in km/s  */
									 Ephemeris          ephOut);   /*      /Output - ephemeris populated with final trajectory data  */
	
	Variable i;
	
	Array initialRPState;
	Array adjustedRPState;
	Array initialMj2kVel;
	Array finalMj2kVel;
	Array targetRPstate;
	
	RotatingPulsatingSystem rp;
	DifferentialCorrector   dc;

	
	// rotating pulsating setup
	rp.SetPrimaryObject(Earth);
	rp.SetSecondaryObject(Moon);	
	

	mnvrEpochs.Clear();
	sks.Clear();
	
	mnvrEpochs.Dimension = 2*nOrbits+1;
	sks.Count            = 2*nOrbits+1;
	
	sc.Save();
	
	For i = 0 to sks.Count-1;

		initialRPState = rp.GetPosVelOfObject(sc.Epoch, sc);
		initialMj2kVel = sc.Velocity;

		adjustedRPState = initialRPState;
		
		mnvrEpochs[i] = sc.Epoch;
		
		sks[i].AttitudeSystem = 0;// mj2k

		Target using dc;

			Iterate sc;

			// maneuver along RLP_X, instead of RLP_Y, as this is usually less DV
			Vary adjustedRPState[3] = initialRPState[3] + 0.00001;

			rp.SetSpacecraftState(sc, adjustedRPState);
			finalMj2kVel = sc.Velocity;

			// get off the x-axis
			sc.Step(); 
			
			// now step to next crossing
			WhileStepping sc to (rp.GetPosVelOfObject(sc.Epoch, sc)[1] == 0);
				If (dc.Converged == 1);
					Put sc to ephOut;
				End;
			End;

			targetRPstate = rp.GetPosVelOfObject(sc.Epoch, sc);
			Achieve targetRPstate[3] = 0 +/- 1e-06;

		End;

		// now copy out DV info (unitized MJ2K)
		sks[i].BurnDirection = finalMj2kVel-initialMj2kVel;

	End;
	
	sc.Restore();
EndProcedure;
