/////////////////////////////////////////////////////////////////////
//
// This set of Procedures contains the following:
//    - BLJ2Periapsis()
//    - BLJ2Apoapsis()
//    - BLJ2PeriapsisHeight()
//    - BLJ2ApoapsisHeight()
//    - BLJ2Period()
//    - BLJ2MeanMotion()
//    - BLJ2NodeRate()
//    - BLJ2ArgumentOfLatitude()
//    - StepToBLJ2Node()
//
// And has dependencies on the following Procdedures:
//    - ECEFtoLLA.FFProcedure
//    - LLAtoECEF.FFProcedure
//
/////////////////////////////////////////////////////////////////////


// BLJ2Periapsis()
// Compute periapsis radius based on Brouwer-Lyddane J2 Elements (in km)
//
// Inputs/Outputs - (See below)
//
// Dependencies:
//       - None
//
// Assumptions:
//       - None

Define Procedure BLJ2Periapsis(Spacecraft          sc,   /* Input/       - input spacecraft whose Brouwer-Lyddane state is to be used  */
							   Variable blj2Periapsis);  /*      /Output - Brouwer-Lyddane J2 periapis radius in km  */
	
	
	Variable error_cnt;
	error_cnt = 0;
	Try sending ErrorCount to error_cnt;
		blj2Periapsis = sc.BLJ2A*(1-sc.BLJ2E);
	End;
	
	If (error_cnt > 0);
		blj2Periapsis = sc.A*(1-sc.E);
		
		Report sc.DisplayName, sc.EpochText, sc.A, sc.E, sc.I, sc.RAAN, sc.W, sc.TA;
	End;
EndProcedure;



// BLJ2Apoapsis()
// Compute apoapsis radius based on Brouwer-Lyddane J2 Elements (in km)
//
// Inputs/Outputs - (See below)
//
// Dependencies:
//       - None
//
// Assumptions:
//       - None

Define Procedure BLJ2Apoapsis(Spacecraft         sc,   /* Input/       - input spacecraft whose Brouwer-Lyddane state is to be used  */
							  Variable blj2Apoapsis);  /*      /Output - Brouwer-Lyddane J2 apoapsis radius in km  */
	
	Variable error_cnt;
	error_cnt = 0;
	Try sending ErrorCount to error_cnt;
		blj2Apoapsis = sc.BLJ2A*(1+sc.BLJ2E);
	End;
	
	If (error_cnt > 0);
		blj2Apoapsis = sc.A*(1+sc.E);
		
		Report sc.DisplayName, sc.EpochText, sc.A, sc.E, sc.I, sc.RAAN, sc.W, sc.TA;
	End;
	
EndProcedure;



// BLJ2PeriapsisHeight()
// Compute periapsis geodetic height based on Brouwer-Lyddane J2 Elements (in km)
//
// Inputs/Outputs - (See below)
//
// Dependencies:
//       - LLAtoECEF
//
// Assumptions:
//       - None

Define Procedure BLJ2PeriapsisHeight(Spacecraft           sc,   /* Input/       - input spacecraft whose Brouwer-Lyddane state is to be used  */
							  		 Variable blj2PeriHeight);  /*      /Output - Brouwer-Lyddane J2 periapis height in km  */
	
	Variable blj2Periapsis;
	Array    lla;
	Array    ecef;
	Array    eVec;
	
	lla.Fill(0,3);
	
	// get periapsis radius
	Call BLJ2Periapsis(sc, blj2Periapsis);
	
	// get lat/lon at periapsis sub-satellite point
	eVec = sc.EVector().Normalized();
	
	eVec = PositionConvert(1, 4, sc.Epoch, eVec);
	
	Call ECEFtoLLA( eVec, lla);
	
	// now take that lat/lon to get the ellipsoidal radius at that point
	lla[2] =  0;
	
	Call LLAtoECEF(lla, ecef);
	
	blj2PeriHeight = blj2Periapsis - ecef.Norm();
	
EndProcedure;



// BLJ2ApoapsisHeight()
// Compute apoapsis geodetic height based on Brouwer-Lyddane J2 Elements (in km)
//
// Inputs/Outputs - (See below)
//
// Dependencies:
//       - LLAtoECEF
//
// Assumptions:
//       - None

Define Procedure BLJ2ApoapsisHeight(Spacecraft           sc,   /* Input/       - input spacecraft whose Brouwer-Lyddane state is to be used  */
							  		Variable  blj2ApoHeight);  /*      /Output - Brouwer-Lyddane J2 apoapsis height in km  */
	
	Variable blj2Apoapsis;
	Array    lla;
	Array    ecef;
	Array    eVec;
	
	lla.Fill(0,3);
	
	// get periapsis radius
	Call BLJ2Apoapsis(sc, blj2Apoapsis);
	
	// get lat/lon at apoapsis sub-satellite point
	eVec = sc.EVector().Normalized();
	
	eVec = PositionConvert(1, 4, sc.Epoch, -1*eVec);
	
	Call ECEFtoLLA( eVec, lla);
	
	// now take that lat/lon to get the ellipsoidal radius at that point
	lla[2] =  0;
	
	Call LLAtoECEF(lla, ecef);
	
	blj2ApoHeight = blj2Apoapsis - ecef.Norm();
	
EndProcedure;




// BLJ2Period()
// Compute the orbital Period based on Brouwer-Lyddane J2 Elements (in seconds)
//
// Inputs/Outputs - (See below)
//
// Dependencies:
//       - None
//
// Assumptions:
//       - None

Define Procedure BLJ2Period(Spacecraft       sc,   /* Input/       - input spacecraft whose Brouwer-Lyddane state is to be used  */
							TimeSpan blj2Period);  /*      /Output - Brouwer-Lyddane J2 Period, in seconds  */
	
	blj2Period = TimeSpan.FromSeconds(2*rad(180)*sqrt(sc.BLJ2A^3/sc.CentralBodyObject.Mu));
	
EndProcedure;



// BLJ2MeanMotion()
// Compute satellite Mean Motion based on Brouwer-Lyddane J2 Elements (in deg/day)
//
// Inputs/Outputs - (See below)
//
// Dependencies:
//       - None
//
// Assumptions:
//       - Assumes the use of Earth Days

Define Procedure BLJ2MeanMotion(Spacecraft           sc,   /* Input/       - input spacecraft whose Brouwer-Lyddane state is to be used  */
								Variable blj2MeanMotion);  /*      /Output - Brouwer-Lyddane J2 Mean Motion in deg/day  */
		
	blj2MeanMotion = deg(sqrt(sc.CentralBodyObject.Mu / sc.BLJ2A^3))*86400;

EndProcedure;


// BLJ2NodeRate()
// Compute orbital node rate based on Brouwer-Lyddane J2 Elements (in deg/day)
//
// Inputs/Outputs - (See below)
//
// Dependencies:
//       - None
//
// Assumptions:
//       - Assumes the use of Earth Days

Define Procedure BLJ2NodeRate(Spacecraft         sc,   /* Input/       - input spacecraft whose Brouwer-Lyddane state is to be used  */
							  Variable blj2NodeRate);  /*      /Output - Brouwer-Lyddane J2 Nodal drift rate, in degrees per day  */
	
	Variable blj2MM;
	Variable cbJ2;
	Variable cbRadius;
	
	blj2MM       = sqrt(sc.CentralBodyObject.Mu / sc.BLJ2A^3);
	
	cbJ2         = sc.CentralBodyObject.J2;
	cbRadius     = sc.CentralBodyObject.Radius;
	
	
	blj2NodeRate = deg(-1.5*(cbJ2*blj2MM*cbRadius^2 / (sc.BLJ2A*(1-sc.BLJ2E^2))^2)*cos(rad(sc.BLJ2I)))*86400;
	
EndProcedure;


// BLJ2ArgumentOfLatitude()
// Compute the Argument of Latitude based on Brouwer-Lyddane J2 Elements (in deg)
//
// Inputs/Outputs - (See below)
//
// Dependencies:
//       - None
//
// Assumptions:
//       - None

Define Procedure BLJ2ArgumentOfLatitude(Spacecraft       sc,   /* Input/       - input spacecraft whose Brouwer-Lyddane state is to be used  */
										Variable blj2ArgLat);  /*      /Output - Brouwer-Lyddane J2 Argument of Latitude, in degrees  */
	
	blj2ArgLat = (sc.BLJ2W + sc.BLJ2MA)%360;
	
EndProcedure;



// StepToBLJ2Node()
// Propagate the argument Spacecraft to its Ascending Node, as defined by the BLJ2 Argument of Latitude of 0
//
// Inputs/Outputs - (See below)
//
// Dependencies:
//       - None
//
// Assumptions:
//       - None

Define Procedure StepToBLJ2Node(	Spacecraft         sc,   /* Input/Output - Spacecraft that will be propagated  */
									Variable  arg_lat_tol);  /* Input/       - Argument of latitude tolerance to achieve  */

	TimeSpan new_node_epoch;
	Variable delta_arg_lat;	
	Variable step_count;
	
	step_count = 0;
	
	// first just step to instantaneous ascending node to get close
	sc.StepToNode(0,0);
	
	delta_arg_lat = AdjustToCyclicRange(-180, 180, (sc.BLJ2MA+sc.BLJ2W)%360);
	
	While ( abs(delta_arg_lat) > arg_lat_tol);
		
		new_node_epoch = sc.Epoch - TimeSpan.FromSeconds(sc.Radius*sin(rad(delta_arg_lat))/sc.Velocity.Norm());
		
		sc.StepToEpoch(new_node_epoch);
		delta_arg_lat = AdjustToCyclicRange(-180, 180, (sc.BLJ2MA+sc.BLJ2W)%360);
		
		step_count++;
		If (step_count > 10);
			// it didn't converge, so throw an error
			Diagnostics.ReportErrorMessage(0, "Error achieving BLJ2Node tolerance of "+arg_lat_tol.Format("%f"));
			ExitProcedure;
		End;
	End;
	
EndProcedure;